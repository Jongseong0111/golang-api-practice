// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package tutorial

import (
	"context"
	"database/sql"
)

const checkDuplicateAccount = `-- name: CheckDuplicateAccount :many
SELECT user_account from scm_account where user_account=?
`

func (q *Queries) CheckDuplicateAccount(ctx context.Context, userAccount string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, checkDuplicateAccount, userAccount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var user_account string
		if err := rows.Scan(&user_account); err != nil {
			return nil, err
		}
		items = append(items, user_account)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const checkDuplicateEmail = `-- name: CheckDuplicateEmail :many
SELECT user_email from scm_account where user_email=?
`

func (q *Queries) CheckDuplicateEmail(ctx context.Context, userEmail string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, checkDuplicateEmail, userEmail)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var user_email string
		if err := rows.Scan(&user_email); err != nil {
			return nil, err
		}
		items = append(items, user_email)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO scm_account (
    user_name, user_account, user_email, user_password
) VALUES (
             ?, ?, ?, ?
         )
`

type CreateUserParams struct {
	UserName     string
	UserAccount  string
	UserEmail    string
	UserPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.UserName,
		arg.UserAccount,
		arg.UserEmail,
		arg.UserPassword,
	)
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM scm_account
WHERE user_id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT user_id, user_name, user_account, user_email, user_password FROM scm_account
WHERE user_id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userID int32) (ScmAccount, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i ScmAccount
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.UserAccount,
		&i.UserEmail,
		&i.UserPassword,
	)
	return i, err
}

const listUser = `-- name: ListUser :many
SELECT user_name, user_account, user_email FROM scm_account
ORDER BY user_name
`

type ListUserRow struct {
	UserName    string
	UserAccount string
	UserEmail   string
}

func (q *Queries) ListUser(ctx context.Context) ([]ListUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUserRow
	for rows.Next() {
		var i ListUserRow
		if err := rows.Scan(&i.UserName, &i.UserAccount, &i.UserEmail); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE scm_account set scm_account.user_name=? where scm_account.user_id=?
`

type UpdateUserParams struct {
	UserName string
	UserID   int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.UserName, arg.UserID)
	return err
}
